/*! \file */
/****************************************************************************** * MSP432 Project 3
 *
 * Device configuration to enable operation is at MCLK=48MHz using HFXT source. Prescaler 4 :1. Timer A1 is used. will be modified later ..

 *
I made it to a normal file bc it uses Timer A0, A1 and this creates error
*******************************************************************************/
#include "msp.h"

/* Standard Includes */
#include <stdint.h>
#include <stdbool.h>
#include "csHFXT.h"



#define QUARTER_NOTE    12000000

#define QUA 12000000
#define OCT 6000000
#define QUADOT 18000000
#define HALF 24000000


uint32_t notePeriod = QUARTER_NOTE;

volatile uint32_t g = 0;



#define G3  61224
#define G3s  12000000/207.65

#define A3  54545

#define A3s 12000000/233.08

#define B3  48595


#define C4  45866
#define D4  40864

#define E4  36404
#define E4p 12000000/311.13


#define B4p 12000000/466.16

#define F4  12000000/349.23

#define G4  QUA/392
#define G4s 12000000/415.30

#define C5  QUA/523.25

#define D5  QUA/587.33

#define E5  QUA/659.25
#define E5p QUA/622.25

#define F5  QUA/698.46

#define G5  QUA/783.99
#define G5s QUA/830.61


#define B6p QUA/932.33
#define C6  QUA/1046.5





const uint16_t completeNotes[26] = {G3, C4, E4, G4, C5, E5,       G5, E5,
                                    G3s, C4, E4p, G4s, C5, E5p,   G5s, E5p,
                                    A3s, D4, F4, B4p, D5, F5,  B6p, B6p, B6p, C6};


const uint16_t completeDur[26] = {OCT,OCT,OCT,OCT,OCT,OCT, QUADOT,QUADOT,
                                  OCT,OCT,OCT,OCT,OCT,OCT, QUADOT,QUADOT,
                                  OCT,OCT,OCT,OCT,OCT,OCT, 
                                  QUADOT, OCT,OCT,OCT, HALF};




    

void passiveBuzzer(void)
{
    /* Stop Watchdog timer */
    WDT_A->CTL = WDT_A_CTL_PW | WDT_A_CTL_HOLD;

    /* Sets MCLK and SMCLK to 48MHz HFXT */
    configHFXT();

    P2->DIR |= BIT3;            // set Empty pin for speaker output
    P2->SEL0 |= BIT3;           // Empty pin set to TA0.1
    P2->SEL1 &= ~BIT3;

    //For changing notes

    TIMER_A1->CTL |= 0x0126;
    TIMER_A1->CCR[2] = notePeriod; // Set initial period in CCR2 register.
    TIMER_A1->CCTL[2] = 0x0010;   //compare with interrupt enabled

    //For Speaker frequency
    TIMER_A0->CCTL[1] |= 0x0060;
    TIMER_A0->CTL |= 0x0294;

    //Enable TA1CCR2 compare interrupt
    NVIC ->ISER[0] = (1 << 11);
    __enable_irq();                 // Enable global interrupt

    while(1)
    {

    }

}

void TA1_N_IRQHandler(void){
    //check if interrupt is triggered
    if(TIMER_A1->CCTL[2] & TIMER_A_CCTLN_CCIFG)
    {
        // Set Period in CCR register
        TIMER_A0->CCR[0] = completeNotes[g] - 1;
        TIMER_A0->CCR[1] = (completeNotes[g] / 2) - 1;
        //Increment until it reaches the end of the array. If it reaches the end, it goes back to 0.
        g = (g + 1) % 26;

        //clear the flag
        TIMER_A1->CCTL[2] &= 0xFFFE;
        //Each note is 250ms
        TIMER_A1->CCR[2] += notePeriod;

    }
}



